-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\broadwayIPC_2024b\conv_core_ip_src_conv_core.vhd
-- Created: 2025-04-15 00:30:26
-- 
-- Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.77039e-06
-- Target subsystem base rate: 2.77039e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.77039e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Video_out                     ce_out        2.77039e-06
-- valid_out_hStart              ce_out        2.77039e-06
-- valid_out_hEnd                ce_out        2.77039e-06
-- valid_out_vStart              ce_out        2.77039e-06
-- valid_out_vEnd                ce_out        2.77039e-06
-- valid_out_valid               ce_out        2.77039e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: conv_core_ip_src_conv_core
-- Source Path: broadwayIPC_2024b/conv_core
-- Hierarchy Level: 0
-- Model version: 9.51
-- 
-- Simulink model description for broadwayIPC_2024b:
-- 
-- Sobel Edge Detection Using the MATLAB(R) Function Block
-- This example shows how to use HDL Coder(TM) to check, 
-- generate, and verify HDL code for a Sobel Edge Detection 
-- block built using the MATLAB Function block.
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY conv_core_ip_src_conv_core IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Video_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        ctrl_hStart                       :   IN    std_logic;
        ctrl_hEnd                         :   IN    std_logic;
        ctrl_vStart                       :   IN    std_logic;
        ctrl_vEnd                         :   IN    std_logic;
        ctrl_valid                        :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        Video_out                         :   OUT   std_logic;
        valid_out_hStart                  :   OUT   std_logic;
        valid_out_hEnd                    :   OUT   std_logic;
        valid_out_vStart                  :   OUT   std_logic;
        valid_out_vEnd                    :   OUT   std_logic;
        valid_out_valid                   :   OUT   std_logic
        );
END conv_core_ip_src_conv_core;


ARCHITECTURE rtl OF conv_core_ip_src_conv_core IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Video_in_unsigned                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Bit_Slice4_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice7_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Subtract2_sub_cast               : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract2_sub_cast_1             : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract2_out1                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay_out1                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Abs2_y                           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Abs2_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice5_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice8_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Subtract3_sub_cast               : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract3_sub_cast_1             : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract3_out1                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay2_out1                      : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Abs3_y                           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Abs3_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice10_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Bit_Slice9_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Subtract4_sub_cast               : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract4_sub_cast_1             : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Subtract4_out1                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Delay3_out1                      : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Abs4_y                           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Abs4_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay4_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic4_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay5_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic3_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum_op_stage1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay6_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Shift_Arithmetic5_out1           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay7_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Constant2_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Relational_Operator1_out1        : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL alpha_reg                        : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay1_out1_hStart               : std_logic;
  SIGNAL alpha_reg_1                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay1_out1_hEnd                 : std_logic;
  SIGNAL alpha_reg_2                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay1_out1_vStart               : std_logic;
  SIGNAL alpha_reg_3                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay1_out1_vEnd                 : std_logic;
  SIGNAL alpha_reg_4                      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay1_out1_valid                : std_logic;

BEGIN
  -- Graychannel Recalculation
  -- Split Input image
  -- from baseline
  -- ImageDifferencing
  -- Binarization Thresholding

  Video_in_unsigned <= unsigned(Video_in);

  Bit_Slice4_out1 <= Video_in_unsigned(55 DOWNTO 48);

  Bit_Slice7_out1 <= Video_in_unsigned(23 DOWNTO 16);

  Subtract2_sub_cast <= signed(resize(Bit_Slice4_out1, 9));
  Subtract2_sub_cast_1 <= signed(resize(Bit_Slice7_out1, 9));
  Subtract2_out1 <= Subtract2_sub_cast - Subtract2_sub_cast_1;

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay_out1 <= Subtract2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Abs2_y <=  - (resize(Delay_out1, 10)) WHEN Delay_out1 < to_signed(16#000#, 9) ELSE
      resize(Delay_out1, 10);
  Abs2_out1 <= unsigned(Abs2_y(7 DOWNTO 0));

  Bit_Slice5_out1 <= Video_in_unsigned(47 DOWNTO 40);

  Bit_Slice8_out1 <= Video_in_unsigned(15 DOWNTO 8);

  Subtract3_sub_cast <= signed(resize(Bit_Slice5_out1, 9));
  Subtract3_sub_cast_1 <= signed(resize(Bit_Slice8_out1, 9));
  Subtract3_out1 <= Subtract3_sub_cast - Subtract3_sub_cast_1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_out1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay2_out1 <= Subtract3_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Abs3_y <=  - (resize(Delay2_out1, 10)) WHEN Delay2_out1 < to_signed(16#000#, 9) ELSE
      resize(Delay2_out1, 10);
  Abs3_out1 <= unsigned(Abs3_y(7 DOWNTO 0));

  Bit_Slice10_out1 <= Video_in_unsigned(39 DOWNTO 32);

  Bit_Slice9_out1 <= Video_in_unsigned(7 DOWNTO 0);

  Subtract4_sub_cast <= signed(resize(Bit_Slice10_out1, 9));
  Subtract4_sub_cast_1 <= signed(resize(Bit_Slice9_out1, 9));
  Subtract4_out1 <= Subtract4_sub_cast - Subtract4_sub_cast_1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay3_out1 <= to_signed(16#000#, 9);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Subtract4_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Abs4_y <=  - (resize(Delay3_out1, 10)) WHEN Delay3_out1 < to_signed(16#000#, 9) ELSE
      resize(Delay3_out1, 10);
  Abs4_out1 <= unsigned(Abs4_y(7 DOWNTO 0));

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Abs2_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Shift_Arithmetic4_out1 <= SHIFT_RIGHT(Delay4_out1, 2);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay5_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Abs3_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Shift_Arithmetic3_out1 <= SHIFT_RIGHT(Delay5_out1, 1);

  Sum_op_stage1 <= resize(Shift_Arithmetic4_out1 + Shift_Arithmetic3_out1, 9);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay6_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Abs4_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Shift_Arithmetic5_out1 <= SHIFT_RIGHT(Delay6_out1, 3);

  Sum_out1 <= resize(Sum_op_stage1, 8) + Shift_Arithmetic5_out1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay7_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Sum_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Constant1_out1 <= to_unsigned(16#14#, 8);

  
  Relational_Operator_out1 <= '1' WHEN Delay7_out1 > Constant1_out1 ELSE
      '0';

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1 <= Relational_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Constant2_out1 <= to_unsigned(16#B4#, 8);

  
  Relational_Operator1_out1 <= '1' WHEN Delay7_out1 < Constant2_out1 ELSE
      '0';

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1 <= Relational_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Logical_Operator_out1 <= Delay9_out1 AND Delay10_out1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1 <= Logical_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        alpha_reg(0) <= ctrl_hStart;
        alpha_reg(4 DOWNTO 1) <= alpha_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_process;

  Delay1_out1_hStart <= alpha_reg(4);

  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        alpha_reg_1(0) <= ctrl_hEnd;
        alpha_reg_1(4 DOWNTO 1) <= alpha_reg_1(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_1_process;

  Delay1_out1_hEnd <= alpha_reg_1(4);

  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha_reg_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        alpha_reg_2(0) <= ctrl_vStart;
        alpha_reg_2(4 DOWNTO 1) <= alpha_reg_2(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_2_process;

  Delay1_out1_vStart <= alpha_reg_2(4);

  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha_reg_3 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        alpha_reg_3(0) <= ctrl_vEnd;
        alpha_reg_3(4 DOWNTO 1) <= alpha_reg_3(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_3_process;

  Delay1_out1_vEnd <= alpha_reg_3(4);

  c_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        alpha_reg_4 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        alpha_reg_4(0) <= ctrl_valid;
        alpha_reg_4(4 DOWNTO 1) <= alpha_reg_4(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_4_process;

  Delay1_out1_valid <= alpha_reg_4(4);

  ce_out <= clk_enable;

  Video_out <= Delay8_out1;

  valid_out_hStart <= Delay1_out1_hStart;

  valid_out_hEnd <= Delay1_out1_hEnd;

  valid_out_vStart <= Delay1_out1_vStart;

  valid_out_vEnd <= Delay1_out1_vEnd;

  valid_out_valid <= Delay1_out1_valid;

END rtl;

